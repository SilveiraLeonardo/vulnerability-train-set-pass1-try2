
<?php
class File {
  public function flag() {
    $this->innocent();
  }

  protected function innocent() {
    echo "AquÃ­ no pasa nada :D\n";
  }
}

class entry {
  private $awesome;

  public function __construct($file) {
    if ($file instanceof File) {
      $this->awesome = $file;
    }
  }

  public function __destruct() {
    if ($this->awesome !== null) {
      $this->awesome->flag();
    }
  }
}

// import JSON error handling package
require_once 'JSON/ErrorHandling.php';

function validateJson($str, $errorMessage = 'Invalid JSON') {
  $error = getJsonError();
  if ($error['code'] !== JSON_ERROR_NONE) {
    throw new InvalidArgumentException($errorMessage . ': ' . $error['message']);
  }
}

function getJsonError() {
  $error = json_last_error();
  if (function_exists('json_last_error_msg')) {
    return ['code' => $error, 'message' => json_last_error_msg()];
  }
  // Fallback for PHP versions < 5.5
  // ... code to return error message and code
  return ['code' => JSON_ERROR_NONE, 'message' => 'No error'];
}

try {
  $input = json_decode($argv[1]);
  validateJson($argv[1]);
  if ($input instanceof stdClass) {
    $file = new File();
    $entry = new entry($file);
  } else {
    throw new InvalidArgumentException("Invalid input format.");
  }
} catch (InvalidArgumentException $e) {
  echo $e->getMessage() . PHP_EOL;
  exit(1);
}
?>
