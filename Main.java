
import testcasesupport.*;

public class Main {

    public static void main(String[] args) {
        
        final List<String> allowedTestClasses = Arrays.asList(
            // Add allowed classnames here:
        );

        if(args.length != 0) {
        
            if(args[0].equals("-h") || args[0].equals("--help")) {
        
                System.err.println("To use this main, you can either run the program with no " +
                "command line arguments to run all test cases or you can specify one or more classes to test");
                System.err.println("For example:");
                System.err.println("java testcasesupport.Main testcases.C690_Unchecked_Return_Value_to_NULL_Pointer_Dereference.custom_function.C690_Unchecked_Return_Value_to_NULL_Pointer_Dereference__custom_function_01 testcases.C481_Assigning_instead_of_Comparing.bool.C481_Assigning_instead_of_Comparing__bool_01");
                System.exit(1);
            }
            
            

            for (String className : args) {
                if (!allowedTestClasses.contains(className)) {
                    System.err.println("Invalid or disallowed test class: " + className);
                    continue;
                }

                try {

                    Class<?> myClass = Class.forName(className);

                    AbstractTestCase myObject = (AbstractTestCase) myClass
                            .newInstance();

                    myObject.runTest(className);

                } catch (ClassNotFoundException ex) {
                    IO.writeLine(String.format("Class %s not found.", className));
                } catch (InstantiationException ex) {
                    IO.writeLine(String.format("Failed to instantiate class %s.", className));
                } catch (IllegalAccessException ex) {
                    IO.writeLine(String.format("Illegal access to class %s.", className));
                } catch (Exception ex) {
                    IO.writeLine(String.format("Unexpected exception occurred while running test for class %s.", className));
                    ex.printStackTrace();
                }
                
                IO.writeLine(""); 

            }

        } else {
        
            
            
            
            runTestC1();
            runTestC2();
            runTestC3();
            runTestC4();
            runTestC5();
            runTestC6();
            runTestC7();
            runTestC8();
            runTestC9();
        }            
    }

    private static void runTestC1() {


                
    }

    private static void runTestC2() {


                
    }

    private static void runTestC3() {

            (new testcases.C397_Throw_Generic.C397_Throw_Generic__declare_Exception_01()).runTest("C397_Throw_Generic__declare_Exception_01");
            (new testcases.C397_Throw_Generic.C397_Throw_Generic__declare_Throwable_01()).runTest("C397_Throw_Generic__declare_Throwable_01");
            (new testcases.C397_Throw_Generic.C397_Throw_Generic__throw_Exception_01()).runTest("C397_Throw_Generic__throw_Exception_01");
            (new testcases.C397_Throw_Generic.C397_Throw_Generic__throw_Throwable_01()).runTest("C397_Throw_Generic__throw_Throwable_01");
            
    }

    private static void runTestC4() {


                
    }

    private static void runTestC5() {


                
    }

    private static void runTestC6() {


                
    }

    private static void runTestC7() {


                
    }

    private static void runTestC8() {


                
    }

    private static void runTestC9() {


                
    }
}
