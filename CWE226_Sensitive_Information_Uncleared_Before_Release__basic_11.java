
import testcasesupport.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Properties;

import java.sql.SQLException;
import java.sql.Connection;
import java.sql.DriverManager;

import java.util.logging.Level;

public class C226_Sensitive_Information_Uncleared_Before_Release__basic_11 extends AbstractTestCase {
    public void bad() throws Throwable {
        if (IO.staticReturnsTrue()) {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            StringBuffer password = new StringBuffer();
            Connection dBConnection = null;

            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                password.append(readerBuffered.readLine());

                // Load configuration from configuration file
                Properties configProperties = new Properties();
                configProperties.load(getClass().getResourceAsStream("/settings/config.properties"));
                String dbUrl = configProperties.getProperty("DB_URL");
                String dbUsername = configProperties.getProperty("DB_USERNAME");

                dBConnection = DriverManager.getConnection(dbUrl, dbUsername, password.toString());
            } catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            } catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            } finally {
                // Clear the password
                password.delete(0, password.length());

                try {
                    if (dBConnection != null) {
                        dBConnection.close();
                    }
                } catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }
                } catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }
                } catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }
            }
        }
    }

    private void good1() throws Throwable { ... } // Unchanged

    private void good2() throws Throwable { ... } // Unchanged

    public void good() throws Throwable { ... } // Unchanged

    public static void main(String[] args) { ... } // Unchanged
}
