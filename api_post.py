
import os
from pathlib import Path

import click
import requests

# Importing the required package for environment variables
from dotenv import load_dotenv

load_dotenv()

api_key_file = Path(os.getenv('API_KEY_FILE', 'api_key.txt'))

@click.command()
@click.argument('message')
def cmd_api_client(message):
    if not api_key_file.exists():

        username = click.prompt('Username')
        password = click.prompt('Password', hide_input=True)

        # Using HTTPS instead of HTTP, and server endpoint from environment variable or default value
        r = requests.post(os.getenv('KEY_REQUEST_URL', 'https://example.com:5000/api/key'), json={'username': username, 'password': password})

        if r.status_code != 200:
            click.echo('Invalid authentication or other error occurred. Status code: {}'.format(r.status_code))
            return False

        api_key = r.json()['key']
        print('Received key:', api_key)

        with api_key_file.open('w') as outfile:
            outfile.write(api_key)

    api_key = api_key_file.read_text().strip()

    # Validate API key before using it (assuming the server has an endpoint for this)
    validate_r = requests.post(os.getenv('KEY_VALIDATION_URL', 'https://example.com:5000/api/validate'), headers={'X-APIKEY': api_key})
    if validate_r.status_code != 200:
        click.echo('Invalid API key')
        return False

    r = requests.post(os.getenv('POST_REQUEST_URL', 'https://example.com:5000/api/post'), json={'text': message}, headers={'X-APIKEY': api_key})
    print(r.text)

if __name__ == '__main__':
    cmd_api_client()
