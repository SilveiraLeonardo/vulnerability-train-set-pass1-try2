
import testcasesupport.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

import java.sql.SQLException;
import java.sql.Connection;
import java.sql.DriverManager;

import java.util.logging.Level;
import java.util.Properties;

public class C226_Sensitive_Information_Uncleared_Before_Release__basic_01 extends AbstractTestCase
{
    public void bad() throws Throwable
    {

        InputStreamReader readerInputStream = null;
        BufferedReader readerBuffered = null;
        StringBuffer password = new StringBuffer();
        Connection dBConnection = null;

        try
        {
            // Load database connection details from a configuration file (properties file)
            Properties properties = new Properties();
            properties.load(getClass().getResourceAsStream("/dbconfig.properties"));
            
            readerInputStream = new InputStreamReader(System.in, "UTF-8");
            readerBuffered = new BufferedReader(readerInputStream);

            password.append(readerBuffered.readLine());

            // Use connection string and credentials from the properties file
            String connectionString = properties.getProperty("connectionString");
            String username = properties.getProperty("username");

            dBConnection = DriverManager.getConnection(connectionString, username, password.toString());
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, "An error occurred.", exceptIO);
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, "An error occurred.", exceptSql);
        }
        finally
        {
            // Clear sensitive data
            password.delete(0, password.length());
            
            try
            {
                if (dBConnection != null)
                {
                    dBConnection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, "An error occurred.", exceptSql);
            }

            try
            {
                if (readerBuffered != null)
                {
                    readerBuffered.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, "An error occurred.", exceptIO);
            }

            try
            {
                if (readerInputStream != null)
                {
                    readerInputStream.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, "An error occurred.", exceptIO);
            }
        }

    }

    public void good() throws Throwable
    {
        good1();
    }

    private void good1() throws Throwable
    {

        InputStreamReader readerInputStream = null;
        BufferedReader readerBuffered = null;
        StringBuffer password = new StringBuffer();
        Connection dBConnection = null;

        try
        {
            // Load database connection details from a configuration file (properties file)
            Properties properties = new Properties();
            properties.load(getClass().getResourceAsStream("/dbconfig.properties"));

            readerInputStream = new InputStreamReader(System.in, "UTF-8");
            readerBuffered = new BufferedReader(readerInputStream);

            password.append(readerBuffered.readLine());

            // Use connection string and credentials from the properties file
            String connectionString = properties.getProperty("connectionString");
            String username = properties.getProperty("username");

            dBConnection = DriverManager.getConnection(connectionString, username, password.toString());
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, "An error occurred.", exceptIO);
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, "An error occurred.", exceptSql);
        }
        finally
        {
            
            password.delete(0, password.length());

            try
            {
                if (dBConnection != null)
                {
                    dBConnection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, "An error occurred.", exceptSql);
            }

            try
            {
                if (readerBuffered != null)
                {
                    readerBuffered.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, "An error occurred.", exceptIO);
            }

            try
            {
                if (readerInputStream != null)
                {
                    readerInputStream.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, "An error occurred.", exceptIO);
            }
        }

    }

    
    public static void main(String[] args) throws ClassNotFoundException,
           InstantiationException, IllegalAccessException
    {
        mainFromParent(args);
    }
}
