
import testcasesupport.*;

import java.io.Console;
import java.io.IOException;

import java.sql.SQLException;
import java.sql.Connection;
import java.sql.DriverManager;

import java.util.Properties;
import java.util.logging.Level;

public class C226_Sensitive_Information_Uncleared_Before_Release_Modified extends AbstractTestCase {
    public void bad() throws Throwable {
        while(true) {
            char[] password = null;
            Connection dBConnection = null;
            String connectionString = null;

            try {
                Console console = System.console();
                if (console != null) {
                    password = console.readPassword("Enter your password: ");
                } else {
                    throw new IOException("No console available.");
                }

                Properties config = new Properties();
                config.load(getClass().getResourceAsStream("/config.properties"));

                connectionString = String.format("jdbc:sqlserver://%s;user=%s;password=%s;",
                        config.getProperty("db.ip"),
                        config.getProperty("db.user"),
                        String.valueOf(password));
                
                dBConnection = DriverManager.getConnection(connectionString);
            } catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            } catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            } finally {
                if (password != null) {
                    for (int i = 0; i < password.length; i++) {
                        password[i] = '\0';
                    }
                }

                try {
                    if (dBConnection != null) {
                        dBConnection.close();
                    }
                } catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }
            }
            break;
        }
    }

    private void good1() throws Throwable {
        bad();
    }

    public void good() throws Throwable {
        good1();
    }

    public static void main(String[] args) throws ClassNotFoundException,
            InstantiationException, IllegalAccessException {
        mainFromParent(args);
    }
}
