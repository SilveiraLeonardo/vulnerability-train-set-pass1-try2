
from flask import Blueprint, render_template, redirect, request, g, session, make_response, flash, jsonify
import libuser
import libsession
import libposts
import libapi
import bleach
from jsonschema import validate, ValidationError
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address

app = Flask(__name__)
limiter = Limiter(app, key_func=get_remote_address)

mod_api = Blueprint('mod_api', __name__, template_folder='templates')

key_schema = {
    "type" : "object",
    "required": [ "username", "password" ],
    "properties" : {
        "username" : {"type" : "string"},
        "password" : {"type" : "string"},
    },
}

post_schema = {
    "type" : "object",
    "required": [ "text" ],
    "properties" : {
        "text" : {"type" : "string"},
    },
}

@mod_api.route('/key', methods=['POST'])
@limiter.limit("5 per minute")
def do_key_create():
    data = request.get_json()

    try:
        validate(data, key_schema)
    except ValidationError:
        return jsonify({'error': 'bad request'}), 400

    key = libapi.keygen(bleach.clean(data['username']), bleach.clean(data['password']))

    if key:
        return jsonify({'key': key}), 200
    else:
        return jsonify({'error': 'unauthorized access'}), 403

@mod_api.route('/post/<username>', methods=['GET'])
def do_post_list(username):
    posts = libposts.get_posts(bleach.clean(username))

    return jsonify(posts)

@mod_api.route('/post', methods=['POST'])
def do_post_create():
    data = { 'username' : libapi.authenticate(request) }

    if not data['username']:
        return jsonify({'error': 'unauthorized access'}), 401

    data.update(request.get_json())

    try:
        validate(data, post_schema)
    except ValidationError:
        return jsonify({'error': 'bad request'}), 400

    libposts.post(bleach.clean(data['username']), bleach.clean(data['text']))
    return "You are awesome! Post created."
