
import pyotp
import sqlite3
from time import sleep
from contextlib import closing

def validate_username(username):
    if not (3 <= len(username) <= 30):
        raise ValueError("Username must be between 3 and 30 characters.")

    if not username.isalnum():
        raise ValueError("Username must contain only alphanumeric characters.")


def get_db_cursor():
    conn = sqlite3.connect("db_users.sqlite")
    conn.row_factory = sqlite3.Row
    return closing(conn), conn.cursor()


def mfa_is_enabled(username):
    validate_username(username)

    with get_db_cursor() as (conn, c):
        user = c.execute("SELECT * FROM users WHERE username = ? and mfa_enabled = 1", (username,)).fetchone()

        return bool(user)


def mfa_disable(username):
    validate_username(username)

    with get_db_cursor() as (conn, c):
        c.execute("UPDATE users SET mfa_enabled = 0 WHERE username = ?", (username,))
        conn.commit()

    return True


def mfa_enable(username):
    validate_username(username)

    with get_db_cursor() as (conn, c):
        c.execute("UPDATE users SET mfa_enabled = 1 WHERE username = ?", (username,))
        conn.commit()

    return True


def mfa_get_secret(username):
    validate_username(username)

    with get_db_cursor() as (conn, c):
        user = c.execute("SELECT * FROM users WHERE username = ?", (username,)).fetchone()

    return user["mfa_secret"] if user else None


def mfa_reset_secret(username):
    validate_username(username)
    secret = pyotp.random_base32()

    with get_db_cursor() as (conn, c):
        c.execute("UPDATE users SET mfa_secret = ? WHERE username = ?", (secret, username))
        conn.commit()

    return True


def mfa_validate(username, otp):
    validate_username(username)
    secret = mfa_get_secret(username)

    if not secret:
        return False

    totp = pyotp.TOTP(secret)
    return totp.verify(otp)

