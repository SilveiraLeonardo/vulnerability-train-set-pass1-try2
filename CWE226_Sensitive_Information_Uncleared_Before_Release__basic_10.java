
import testcasesupport.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.logging.Level;

public class C226_Sensitive_Information_Uncleared_Before_Release__basic_10 extends AbstractTestCase {

    private void good1() throws Throwable {
        InputStreamReader readerInputStream = null;
        BufferedReader readerBuffered = null;
        StringBuffer password = new StringBuffer();
        Connection dBConnection = null;
        
        try {
            readerInputStream = new InputStreamReader(System.in, "UTF-8");
            readerBuffered = new BufferedReader(readerInputStream);

            password.append(readerBuffered.readLine());

            String dbURL = System.getenv("DB_URL");
            String dbUser = System.getenv("DB_USER");

            dBConnection = DriverManager.getConnection(dbURL, dbUser, password.toString());
        } catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
        } catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            System.out.println("Error connecting to the database. Please, try again.");
        } finally {
            password.delete(0, password.length());
            try {
                if (dBConnection != null) {
                    dBConnection.close();
                }
            } catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }
            try {
                if (readerBuffered != null) {
                    readerBuffered.close();
                }
            } catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
            }
            try {
                if (readerInputStream != null) {
                    readerInputStream.close();
                }
            } catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
            }
        }
    }
    public void good() throws Throwable {
        good1();
    }
    public static void main(String[] args) throws ClassNotFoundException,
           InstantiationException, IllegalAccessException {
        mainFromParent(args);
    }
}
