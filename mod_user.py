
from flask import Blueprint, redirect, request, make_response, flash, render_template, session
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField
from wtforms.validators import DataRequired, EqualTo, Length
from flask_limiter.util import get_remote_address
from flask_limiter import Limiter
import libmfa
import libuser


# App configuration with CSRF protection
mod_user = Blueprint('mod_user', __name__, template_folder='templates')
limiter = Limiter(key_func=get_remote_address)

class LoginForm(FlaskForm):
    username = StringField("username", validators=[DataRequired()])
    password = PasswordField("password", validators=[DataRequired()])

class RegisterForm(FlaskForm):
    username = StringField("username", validators=[DataRequired()])
    password = PasswordField("password", validators=[DataRequired()])

class ChangePasswordForm(FlaskForm):
    password = PasswordField("password", validators=[DataRequired(), Length(min=8)])
    password_again = PasswordField("password_again", validators=[DataRequired(), EqualTo("password")])


@mod_user.route("/login", methods=["GET", "POST"])
@limiter.limit("5 per minute")  # rate-limiting
def do_login():
    form = LoginForm()

    if form.validate_on_submit():
        username = form.username.data
        password = form.password.data
        user = libuser.login(username, password)

        if not user:
            flash("Invalid user or password")
            return render_template('user.login.mfa.html', form=form)

        if libmfa.mfa_is_enabled(user):
            otp = request.form.get('otp')
            if not libmfa.mfa_validate(user, otp):
                flash("Invalid OTP")
                return render_template('user.login.mfa.html', form=form)

        session['username'] = user
        return redirect('/')

    return render_template("user.login.mfa.html", form=form)


@mod_user.route("/create", methods=["GET", "POST"])
@limiter.limit("2 per minute")  # rate-limiting
def do_create():
    form = RegisterForm()

    if form.validate_on_submit():
        username = form.username.data
        password = form.password.data
        libuser.create(username, password)
        flash("User created. Please login.")
        return redirect('/user/login')

    return render_template("user.create.html", form=form)


@mod_user.route("/chpasswd", methods=["GET", "POST"])
def do_chpasswd():
    form = ChangePasswordForm()

    if form.validate_on_submit():
        password = form.password.data
        password_again = form.password_again.data
        if 'username' not in session:
            flash("Please log in to change your password")
            return redirect('/user/login')

        libuser.password_change(session['username'], password)
        flash("Password changed")

    return render_template("user.chpasswd.html", form=form)
