
const express = require('express');
const config = require('../config')
const router = express.Router()
const MongoClient = require('mongodb').MongoClient;
const bcrypt = require('bcrypt'); // Added bcrypt for password hashing
const cors = require('cors'); // Added CORS for Cross-Origin requests handling
const url = config.MONGODB_URI;

router.use(cors()); // Enable CORS for all routes

// Input Validation Middleware
const validateInput = (req, res, next) => {
    // Validate input here, e.g., check for SQL injection, XSS attacks, etc.
    // If validation fails, return a response like: return res.status(400).json({error: 'Invalid input'});
    next();
}

router.post('/customers/register', validateInput, async (req, res) => {

    const client = await MongoClient.connect(url, { useNewUrlParser: true })
        .catch(err => { console.log(err); });
...
    const hashedPassword = await bcrypt.hash(req.body.password, 10); // Hash password
    let myobj = { name: req.body.name, address: req.body.address, email: req.body.email, password: hashedPassword };
...
        if (err) {
            console.error(err);
            return res.status(500).json({ error: "Internal server error" });
        }
...
})

router.post('/customers/find', validateInput, async (req, res) => {
...
        if (err) {
            console.error(err);
            return res.status(500).json({ error: "Internal server error" });
        }
...
})

router.post('/customers/login', validateInput, async (req, res) => {
...
    let myobj = { email: req.body.email };
    customers.findOne(myobj, async function (err, result) {
        if (err) {
            console.error(err);
            return res.status(500).json({ error: "Internal server error" });
        }
        
        // Compare input password with the hashed password in the database
        const match = await bcrypt.compare(req.body.password, result.password);
        if (match) {
            res.json(result)
        } else {
            res.status(401).json({error: "Invalid email or password"});
        }
    });
})

module.exports = router
