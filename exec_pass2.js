const express = require('express');
const router = express.Router();
const ping = require('ping');
const { execFile, spawn } = require('child_process');
const path = require('path');
const validator = require('validator');
const safeRegex = require('safe-regex');

router.post('/ping', (req, res) => {
    const host = req.body.url;
    
    if (!host || !validator.isURL(host)) {
        return res.send('error');
    }

    const hostname = new URL(host).hostname;

    ping.promise.probe(hostname)
        .then((result) => {
            if (result.alive) {
                res.send('pong');
            } else {
                res.send('error');
            }
        })
        .catch((error) => {
            res.send('error');
        });
});

router.post('/gzip', (req, res) => {
    const filePath = req.query.file_path;
    const allowedDir = '/path/to/allowed/folder'; // Set this path to the allowed folder

    if (!filePath || !path.isAbsolute(filePath) || !filePath.startsWith(allowedDir)) {
        return res.status(400).send('Invalid file path');
    }

    execFile('gzip', [filePath], (err, data) => {
        if (err) {
            console.log('err: ', err);
            return res.status(500).send('Error');
        }
        console.log('data: ', data);
        res.send('done');
    });
});

router.get('/run', (req, res) => {
    let cmd = req.params.cmd;

    if (!cmd || !safeRegex(cmd)) {
        return res.status(400).send('No command or unsafe command specified');
    }

    const allowedCommands = ['command1', 'command2', 'command3'];
    if (!allowedCommands.includes(cmd)) {
        return res.status(403).send('Forbidden command');
    }

    runMe(cmd, res);
});

function runMe(cmd, res) {
    const cmdRunning = spawn(cmd, []);
    cmdRunning.on('close', (code) => {
        res.send(`child process exited with code ${code}`);
    });
}

module.exports = router;