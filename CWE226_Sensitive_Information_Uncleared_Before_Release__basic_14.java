
import testcasesupport.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;
import java.util.Arrays;

import java.sql.SQLException;
import java.sql.Connection;
import java.sql.DriverManager;

import java.util.logging.Level;

import org.apache.commons.validator.GenericValidator;

public class C226_Sensitive_Information_Uncleared_Before_Release extends AbstractTestCase
{
	public void bad() throws Throwable
	{
		if (IO.staticFive == 5)
		{
			InputStreamReader readerInputStream = null;
			BufferedReader readerBuffered = null;
			char[] password = new char[50];
			Connection dBConnection = null;

			try
			{
				readerInputStream = new InputStreamReader(System.in, "UTF-8");
				readerBuffered = new BufferedReader(readerInputStream);

				// Read user input and validate it
				String userInput = readerBuffered.readLine();
				if (GenericValidator.isBlankOrNull(userInput) || userInput.length() > password.length) {
					throw new IllegalArgumentException("Invalid input");
				}

				// Copy input to char array and clear the string
				userInput.getChars(0, userInput.length(), password, 0);
				userInput = null;

				// Load database configuration from a file
				Properties dbProperties = new Properties();
				dbProperties.load(Files.newInputStream(Paths.get("database.properties")));

				String dbUrl = dbProperties.getProperty("url");
				String dbUsername = dbProperties.getProperty("username");

				dBConnection = DriverManager.getConnection(dbUrl, dbUsername, new String(password));
			}
			catch (IOException exceptIO)
			{
				IO.logger.log(Level.WARNING, "Error with stream reading or loading database properties", exceptIO);
			}
			catch (SQLException exceptSql)
			{
				IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
			}
			finally
			{
				// Clear the password array
				Arrays.fill(password, '0');

				try
				{
					if (dBConnection != null)
					{
						dBConnection.close();
					}
				}
				catch (SQLException exceptSql)
				{
					IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
				}

				try
				{
					if (readerBuffered != null)
					{
						readerBuffered.close();
					}
				}
				catch (IOException exceptIO)
				{
					IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
				}

				try
				{
					if (readerInputStream != null)
					{
						readerInputStream.close();
					}
				}
				catch (IOException exceptIO)
				{
					IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
				}
			}
		}
	}

	private void good1() throws Throwable
	{
		if (IO.staticFive != 5)
		{
			IO.writeLine("Benign, fixed string");
		}
		else
		{

			InputStreamReader readerInputStream = null;
			BufferedReader readerBuffered = null;
			char[] password = new char[50];
			Connection dBConnection = null;

			try
			{
				readerInputStream = new InputStreamReader(System.in, "UTF-8");
				readerBuffered = new BufferedReader(readerInputStream);

				// Read user input and validate it
				String userInput = readerBuffered.readLine();
				if (GenericValidator.isBlankOrNull(userInput) || userInput.length() > password.length) {
					throw new IllegalArgumentException("Invalid input");
				}

				// Copy input to char array and clear the string
				userInput.getChars(0, userInput.length(), password, 0);
				userInput = null;

				// Load database configuration from a file
				Properties dbProperties = new Properties();
				dbProperties.load(Files.newInputStream(Paths.get("database.properties")));

				String dbUrl = dbProperties.getProperty("url");
				String dbUsername = dbProperties.getProperty("username");

				dBConnection = DriverManager.getConnection(dbUrl, dbUsername, new String(password));
			}
			catch (IOException exceptIO)
			{
				IO.logger.log(Level.WARNING, "Error with stream reading or loading database properties", exceptIO);
			}
			catch (SQLException exceptSql)
			{
				IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
			}
			finally
			{
				// Clear the password array
				Arrays.fill(password, '0');

				try
				{
					if (dBConnection != null)
					{
						dBConnection.close();
					}
				}
				catch (SQLException exceptSql)
				{
					IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
				}

				try
				{
					if (readerBuffered != null)
					{
						readerBuffered.close();
					}
				}
				catch (IOException exceptIO)
				{
					IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
				}

				try
				{
					if (readerInputStream != null)
					{
						readerInputStream.close();
					}
				}
				catch (IOException exceptIO)
				{
					IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
				}
			}
		}
	}

	public void good() throws Throwable
	{
		good1();
	}

	public static void main(String[] args) throws ClassNotFoundException,
			InstantiationException, IllegalAccessException
	{
		mainFromParent(args);
	}
}
